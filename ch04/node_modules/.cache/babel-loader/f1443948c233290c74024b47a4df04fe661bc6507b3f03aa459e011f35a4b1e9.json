{"ast":null,"code":"var _jsxFileName = \"C:\\\\react_project\\\\react\\\\ch04\\\\src\\\\EventPractice2.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventPractice2() {\n  _s();\n  //input 창이 여러개인 경우는 state를 한꺼번에 관리해야 한다. -> json 객체로 관리\n  //하나의 form state를 가지고 여러개의 값을 관리\n  const [form, setForm] = useState({\n    username: '',\n    message: ''\n  });\n  //비구조화 할당을 통해 form state안의 값을 할당\n  const {\n    username,\n    message\n  } = form;\n\n  // username, message = ''\n\n  const onClick = e => {\n    alert('첫 번째 입력값: ' + username + '\\n두 번째 입력값: ' + message);\n\n    //alert 창 종료 후 state값 초기화\n    setForm({\n      username: '',\n      message: ''\n    });\n  };\n\n  //사용자가 입력한 값을 가져와서 state값을 바꿔준다.\n  const onChange = e => {\n    const nextForm = {\n      ...form,\n      // 기존 form 내용을 복사한 뒤\n      [e.target.name]: e.target.value // 덮어쓰기가 일어난다.\n    };\n    setForm(nextForm); // 덮어씌운 값으로 상태변화시킴\n  };\n  const onKeyDown = e => {\n    console.log(e.key); // 누른 Key의 이름 출력\n    if (e.key === 'Enter') {\n      // Enter Key를 눌렀을 때\n      onClick();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uC774\\uBCA4\\uD2B8 \\uC5F0\\uC2B5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"username\",\n      placeholder: \"\\uC544\\uBB34\\uAC70\\uB098 \\uC785\\uB825\",\n      value: username,\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"message\",\n      placeholder: \"\\uC544\\uBB34\\uAC70\\uB098 \\uC785\\uB825\",\n      value: message,\n      onChange: onChange,\n      onKeyDown: onKeyDown\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClick,\n      children: \"\\uD655\\uC778\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 7\n  }, this);\n}\n_s(EventPractice2, \"8Bi/reSky1n2ZB15nWaMyWEKwFU=\");\n_c = EventPractice2;\nexport default EventPractice2;\nvar _c;\n$RefreshReg$(_c, \"EventPractice2\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","EventPractice2","_s","form","setForm","username","message","onClick","e","alert","onChange","nextForm","target","name","value","onKeyDown","console","log","key","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","_c","$RefreshReg$"],"sources":["C:/react_project/react/ch04/src/EventPractice2.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction EventPractice2() {\r\n   //input 창이 여러개인 경우는 state를 한꺼번에 관리해야 한다. -> json 객체로 관리\r\n   //하나의 form state를 가지고 여러개의 값을 관리\r\n   const [form, setForm] = useState({\r\n      username: '',\r\n      message: '',\r\n   });\r\n   //비구조화 할당을 통해 form state안의 값을 할당\r\n   const { username, message } = form;\r\n\r\n   // username, message = ''\r\n\r\n   const onClick = (e) => {\r\n      alert('첫 번째 입력값: ' + username + '\\n두 번째 입력값: ' + message);\r\n\r\n      //alert 창 종료 후 state값 초기화\r\n      setForm({ username: '', message: '' });\r\n   };\r\n\r\n   //사용자가 입력한 값을 가져와서 state값을 바꿔준다.\r\n   const onChange = (e) => {\r\n      const nextForm = {\r\n         ...form, // 기존 form 내용을 복사한 뒤\r\n         [e.target.name]: e.target.value, // 덮어쓰기가 일어난다.\r\n      };\r\n\r\n      setForm(nextForm); // 덮어씌운 값으로 상태변화시킴\r\n   };\r\n   const onKeyDown = (e) => {\r\n      console.log(e.key); // 누른 Key의 이름 출력\r\n      if (e.key === 'Enter') {\r\n         // Enter Key를 눌렀을 때\r\n         onClick();\r\n      }\r\n   };\r\n\r\n   return (\r\n      <div>\r\n         <h1>이벤트 연습</h1>\r\n         <input type=\"text\" name=\"username\" placeholder=\"아무거나 입력\" value={username} onChange={onChange} />\r\n         <input type=\"text\" name=\"message\" placeholder=\"아무거나 입력\" value={message} onChange={onChange} onKeyDown={onKeyDown} />\r\n         <button onClick={onClick}>확인</button>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default EventPractice2;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACvB;EACA;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC;IAC9BO,QAAQ,EAAE,EAAE;IACZC,OAAO,EAAE;EACZ,CAAC,CAAC;EACF;EACA,MAAM;IAAED,QAAQ;IAAEC;EAAQ,CAAC,GAAGH,IAAI;;EAElC;;EAEA,MAAMI,OAAO,GAAIC,CAAC,IAAK;IACpBC,KAAK,CAAC,YAAY,GAAGJ,QAAQ,GAAG,cAAc,GAAGC,OAAO,CAAC;;IAEzD;IACAF,OAAO,CAAC;MAAEC,QAAQ,EAAE,EAAE;MAAEC,OAAO,EAAE;IAAG,CAAC,CAAC;EACzC,CAAC;;EAED;EACA,MAAMI,QAAQ,GAAIF,CAAC,IAAK;IACrB,MAAMG,QAAQ,GAAG;MACd,GAAGR,IAAI;MAAE;MACT,CAACK,CAAC,CAACI,MAAM,CAACC,IAAI,GAAGL,CAAC,CAACI,MAAM,CAACE,KAAK,CAAE;IACpC,CAAC;IAEDV,OAAO,CAACO,QAAQ,CAAC,CAAC,CAAC;EACtB,CAAC;EACD,MAAMI,SAAS,GAAIP,CAAC,IAAK;IACtBQ,OAAO,CAACC,GAAG,CAACT,CAAC,CAACU,GAAG,CAAC,CAAC,CAAC;IACpB,IAAIV,CAAC,CAACU,GAAG,KAAK,OAAO,EAAE;MACpB;MACAX,OAAO,CAAC,CAAC;IACZ;EACH,CAAC;EAED,oBACGP,OAAA;IAAAmB,QAAA,gBACGnB,OAAA;MAAAmB,QAAA,EAAI;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACfvB,OAAA;MAAOwB,IAAI,EAAC,MAAM;MAACX,IAAI,EAAC,UAAU;MAACY,WAAW,EAAC,uCAAS;MAACX,KAAK,EAAET,QAAS;MAACK,QAAQ,EAAEA;IAAS;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChGvB,OAAA;MAAOwB,IAAI,EAAC,MAAM;MAACX,IAAI,EAAC,SAAS;MAACY,WAAW,EAAC,uCAAS;MAACX,KAAK,EAAER,OAAQ;MAACI,QAAQ,EAAEA,QAAS;MAACK,SAAS,EAAEA;IAAU;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACpHvB,OAAA;MAAQO,OAAO,EAAEA,OAAQ;MAAAY,QAAA,EAAC;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnC,CAAC;AAEZ;AAACrB,EAAA,CA5CQD,cAAc;AAAAyB,EAAA,GAAdzB,cAAc;AA8CvB,eAAeA,cAAc;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}